////////////////// basic code to creat a doc mongodb /////////////////////////

from flask import Flask ,Response ,request
import pymongo
import json
app = Flask(__name__)                # creating an instance of app aplication 

try:  ##connect to database 
    mongo = pymongo.MongoClient(host="localhost",port=27017,serverSelectionTimeoutMS =1000 )
    db = mongo.company
    mongo.server_info()  # trigger exception if  we can not connect to db 


except : 
    print("error _cznt not connect ot db")

#########################
@app.route("/users",methods=["POST"])
def create_user():
    try :
        user ={"name" : request.form["name"] ,"lastName" :request.form["lastname"] }
        dbResponse = db.users.insert_one(user)
        print(dbResponse.inserted_id)
        # for attr in dir(dbResponse):
            
        #     print(attr)
        return Response(
            response=json.dumps({"message":"usercreated" ,"idd": f"{dbResponse.inserted_id}"}
             ), status=200,
                        mimetype="application/json")
    except Exception as ex:
        print(ex)
#########################
if __name__ == "__main__" :
    app.run(port=5555,debug=True)               # you choose any port you want above  65535
/////////////////////// we used postmen for the request //////////////////////////////


 ///////////////////////////////////////posting and getting /////////////////////////////////////
    //////////////////////////////////////creating and reading /////////////////////////////////////
from flask import Flask ,Response ,request
import pymongo
import json
from bson.objectid import ObjectId   # we can use the object id as text 


app = Flask(__name__)                # creating an instance of app aplication 

try:  ##connect to database 
    mongo = pymongo.MongoClient(host="localhost",port=27017,serverSelectionTimeoutMS =1000 )
    db = mongo.company
    mongo.server_info()  # trigger exception if  we can not connect to db 


except : 
    print("error _cznt not connect ot db")
####################################################" reading
@app.route("/users",methods=["GET"])
def get_some_users():
    try: 
        data = list(db.users.find())
        for user in data :
            user["_id"] = str(user["_id"])
            print(user["name"])
        return Response(
            response=json.dumps(data),
              status=500,
            mimetype="application/json")



    except Exception as ex:
        print(ex)
        return Response(
            response=json.dumps({"message":"cannot ead a users "}
             ), status=500,
            mimetype="application/json")





#########################  creating
@app.route("/users",methods=["POST"])
def create_user():
    try :
        user ={"name" : request.form["name"] ,"lastName" :request.form["lastname"] }
        dbResponse = db.users.insert_one(user)
        print(dbResponse.inserted_id)
        # for attr in dir(dbResponse):
            
        #     print(attr)
        return Response(
            response=json.dumps({"message":"usercreated" ,"idd": f"{dbResponse.inserted_id}"}
             ), status=200,
                        mimetype="application/json")
    except Exception as ex:
        print(ex)
#########################
if __name__ == "__main__" :
    app.run(port=5555,debug=True)               # you choose any port you want above  65535

###########################################"updating , creat ,read ##############################"






##########################################################################################################
from flask import Flask ,Response ,request,redirect,url_for,render_template
from pymongo import MongoClient
import json
from bson.objectid import ObjectId   # we can use the object id as text 


app = Flask(__name__)                # creating an instance of app aplication 

try:  ##connect to database 
    mongo = MongoClient("mongodb+srv://nassim:zamoum@nodetuts.i6qazqe.mongodb.net/sensors_db")
    db = mongo.sensors_db
    mongo.server_info()  # trigger exception if  we can not connect to db 


except : 
    print("error _cznt not connect ot db")

####################################################" updating 
@app.route("/api/sensors/<id>",methods =["PATCH"])
def update_users(id):
    try : 
        dbResponse = db.sensors.update_one({"_id": ObjectId(id)},
        {"$set": {"name" : request.form["name"]}}                          
                                         )
        return Response(
            response=json.dumps({"message":" user updated  successfully "}
             ), status=200,
            mimetype="application/json")    

    except Exception as ex :
        print(ex)
        return Response(
            response=json.dumps({"message":"cannot update "}
             ), status=500,
            mimetype="application/json")


####################################################" reading
@app.route("/api/sensors",methods=["GET"])
def get_some_users():
    
    data = list(db.sensors.find())
    for user in data :
        user["_id"] = str(user["_id"])
        print(user["name"])
    return Response(
            response=json.dumps(data),
              status=500,
            mimetype="application/json")



    
    





#########################  creating
@app.route("/api/sensors",methods=["POST"])
def create_user():
    
    user ={"name" : request.form["name"] ,"lastName" :request.form["lastname"] }
    dbResponse = db.sensors.insert_one(user)
    print(dbResponse.inserted_id)
        # for attr in dir(dbResponse):
            
        #     print(attr)
    return Response(
            response=json.dumps({"message":"usercreated" ,"idd": f"{dbResponse.inserted_id}"}
             ), status=200,
                        mimetype="application/json")

            
    
    
#########################
@app.route("/home")
def home():
    t=55
    p=45
    l=16
    return render_template('main.html',t=t,p=p,l=l)








####################################################
if __name__ == "__main__" :
    app.run(port=5555,debug=True)               # you choose any port you want above  65535